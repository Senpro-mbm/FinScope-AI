import jQuery from 'jquery';

const $ = jQuery;

export default class Per {
    constructor(options) {
        this.options = {
            url: "", //后端收集数据的URL（必须）
            rate: 0.1, //抽样比例（必须，默认为10%抽中）
            data: { //额外需要发送的数据（非必须）
                "ext_domain": encodeURIComponent(document.domain),
                "ext_path": encodeURIComponent(window.location.pathname.toLowerCase().replace(/\//g, "_"))
            }
        }
        //合并参数
        $.extend(true, this.options, options);
        //原始timing数据
        this.timing = {};
        //用于存储解析后的数据
        this.data = {};
        //启动程序
        this.start();
    }

    /**
     * [check 检查是否支持navigation timing api，并且包含在抽样中]
     * @return {[type]} [description]
     */
    check() {
        return window.performance && window.performance.timing && Math.random() < this.options.rate;
    }

    /**
     * [setup 处理数据和后续动作]
     * @return {[type]} [description]
     */
    setup() {
        this.timing = window.performance.timing;
        //数据正常时才发送
        if (this.setData()) {
            this.send(this.options.url, this.data);
        }
    }

    /**
     * [setData 设置需要发送给后端的数据]
     */
    setData() {
        const timing = this.timing;
        let startTime = timing.navigationStart || timing.fetchStart;
        let data = {
            "t_unload": timing.unloadEventEnd - timing.unloadEventStart, //上个文档的卸载时间
            "t_redirect": timing.redirectEnd - timing.redirectStart, //*重定向时间
            "t_dns": timing.domainLookupEnd - timing.domainLookupStart, //*DNS查询时间
            "t_tcp": timing.connectEnd - timing.connectStart, //*服务器连接时间
            "t_request": timing.responseStart - timing.requestStart, //*服务器响应时间
            "t_response": timing.responseEnd - timing.responseStart, //*网页下载时间
            "t_paint": this.getFirstPaintTime() - startTime, //*首次渲染时间
            "t_dom": timing.domContentLoadedEventStart - timing.domLoading, //dom ready时间（阶段）
            "t_domready": timing.domContentLoadedEventStart - startTime, //*dom ready时间（总和）
            "t_load": timing.loadEventStart - timing.domLoading, //onload时间（阶段）
            "t_onload": timing.loadEventStart - startTime, //*onload时间（总和）
            "t_white": timing.responseStart - startTime, //*白屏时间
            "t_all": timing.loadEventEnd - startTime //整个过程的时间之和
        };
        for (let key in data) {
            //删除无用数据，避免干扰(小于等于0或大于两分钟)
            if (data[key] <= 0 || data[key] >= 120000) {
                delete data[key];
            }
        }
        //合并程序外传入的数据
        $.extend(true, this.data, data, this.options.data);
        return startTime > 0;
    }

    /**
     * [getFirstPaintTime 获取首次渲染时间]
     * @return {[type]} [description]
     */
    getFirstPaintTime() {
        var firstPaintTime = 0;
        if (window.chrome && typeof window.chrome.loadTimes === "function") { //Chrome
            firstPaintTime = window.chrome.loadTimes().firstPaintTime * 1000;
        } else if (typeof this.timing.msFirstPaint === "number") { //IE
            firstPaintTime = this.timing.msFirstPaint;
        }
        return Math.round(firstPaintTime);
    }

    /**
     * [send 发送数据到后端]
     * @param  {[String]} url  [后端上报数据接口]
     * @param  {[Object]} data [上报数据]
     */
    send(url, data) {
        let img = new Image();
        img.src = url + "?" + $.param(data);
    }

    /**
     * [start 程序主入口]
     * @param  {[Object]} this [配置信息]
     */
    start() {
        const self = this;
        if (self.check()) {
            if (window.performance.timing.loadEventEnd > 0) {
                self.setup();
            } else {
                $(window).on("load", function () {
                    window.setTimeout(function () {
                        self.setup();
                    }, 0);
                });
            }
        }
    }
}
